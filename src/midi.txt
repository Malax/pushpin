_____________________________________________________________________
P u s h p i n
Documentation 
September 2000
--------------

What is Pushpin?
----------------
Pushpin is a MIDI Synthesizer that operates on a Nintendo Game Boy Color.
A MIDI synthesizer is a device that listens to MIDI signals from a music
sequencer or keyboard and produces sound. Pushpin exists as a Game Boy
cartridge and MIDI Cable that allows you to control the Game Boy's sound
output via any MIDI instrument. For example, you can sequence songs from
your computer or hardware arranger that uses the Game Boy as an
instrument.


Compatibility
-------------
Pushpin must be executed on a Nintendo Game Boy Color device. No other
version of the Game Boy will work with Pushpin. While Pushpin doesn't
need to be in color, the GBC is twice as fast as the standard Game Boy,
which is necessary to process data at MIDI baud.

For obvious reasons (link cable), Pushpin will not do very much on an
emulator.


Who can use it?
---------------
Pushpin was developed for two groups of people: musicians and Game Boy
developers. Musicians can now make great music in a small form factor for
a low cost. The Game Boy's sound chip is incredibly unique and has many
tweakable parameters. We here at dsperado prefer it to the tired-but-true
Roland TB303. It is capable of producing wonderfully chirpy synth leads
as well as skittish drum sounds and convincing bass. It is multitimbral,
meaning you can control up to 4 instruments as once with no overdubbing.

Game Boy developers can use this system to prototype music or sound
effects for their games. They can sequence their music as they normally
do using a professional MIDI sequencer such as Emagic's Logic or Opcode's
Vision, and instead of playing an emulated system during auditions, they
can use an actual Game Boy. Every single register of the sound hardware
is accessible via MIDI Control Changes.


What comes with Pushpin?
------------------------
Pushpin is two things: the cartridge, compatible only with the Game Boy
Colour, and the MIDI Link cable. The cartridge plugs into your Game Boy,
and the cable plugs into your Link Port on the Game Boy. The other end of
the cable hooks into whichever MIDI device or port you choose. 

Also available (but not included) is Hedgehog for Pushpin, a pattern
sequencer for Palm OS devices (Visors, Pilots, Workpads.) This version of
Hedgehog is specially produced for use with the Pushpin hardware, and
allows users to create whole songs in a small, battery powered
environment. 


How do I use Pushpin?
---------------------
Easy enough-- first, if you are not already, we recommend you familarise
yourself with the MIDI standard. Very little work is done on the Game Boy
itself; all parameters of the sound are controlled over MIDI. The
simplest thing to try is to play a note from your MIDI source and hear it
on Sound Channel 1 of the Game Boy. MIDI Channel 1 controls the first
Sound Channel of the Game Boy, channel 2 the second, channel 3 the Wave
Pattern, and channel 4 the noise / drum channel. For more information on
the sound producing variations of Pushpin, see the Sound Specification
section.

You can change parameters of each channel by using the controller values
(listed below in the MIDI Specification.) You can sequence continuous
changes of parameters along with the notes in your song, or just set up
'patches' using the Program Change capabilities of Pushpin.


How do I recall / save patches?
-------------------------------
Pushpin defines 'patches' as the entire set of parameters for a single
Sound Channel. For example, a patch for Sound Channel 1 contains the
frequency sweep information, the envelope, and the duty function of the
pattern. 

Each sound channel contains 127 patches that can be recalled (activated)
using the MIDI Program Change Message. Your sequencer undoubtedly
supports this. You tell your sequencer to send a PC message at the
correct channel and for the correct patch, and Pushpin will reset the
sound (there will be a slight pause and the current sound channel will
be muted.) 

On first use, Pushpin has 'demo patches' loaded into its patch memory
that you may use or change to your liking.

By hitting the START key *at any time*, any changes you have made to a
patch (via the controller parameters) will be saved into the current
patch slot (displayed on screen.)

Patches are saved even when the Game Boy is off or the unit's batteries
are removed. 


What can I do with the Wave Pattern RAM?
----------------------------------------
The Wave Pattern RAM (controlled by Sound Channel 3) can contain
arbitrary information, but during sound playback, it is played right
through at the specified frequency (set by the MIDI note.) It is most
suited for loading in various waveforms (triangle, sine, noise) but can
also be tricked into playing samples (digital audio) if you can change
the RAM quickly enough. (See "Using Pushpin to Play Digital Audio and Not
Much Else" below)

As well, you can change the Wave Pattern RAM while it plays. With enough
controller tweaking, you can create a sound that morphs between, say,
triangle and sine. To change the Wave Pattern RAM during play, use MIDI
controller numbers 54 through 85. Each controller scales to a sample in
the pattern.

The Wave Pattern RAM's contents are stored as a patch for Sound Channel
3, so if you make any changes to it, please note that it will be saved
(destroying the old Wave Pattern) if you hit the START key.



_____________________________________________________________________
(Technical Information, skip if not interested)

Pushpin was written with the GBDK in z80 assembler. Tips on the elusive
pin 4 digital input from Ken Kaarvik. 

Using Pushpin to Play Digital Audio and Not Much Else
-----------------------------------------------------
{more here}
{byte 0 click problem}
{nyquist problem}
{midi baud}
{highest freq ~2khz, ugh, 4 bit ugh}
{other messages?}




_____________________________________________________________________
Sound Specification for Pushpin




_____________________________________________________________________
MIDI Specification for Pushpin

Sound1 refers to the square wave w/ envelope and freq. sweep channel
Sound2 refers to the square wave w/ envelope channel
Sound3 refers to the wave pattern RAM channel
Sound4 refers to the noise channel


MIDI Note On Messages
---------------------
Pushpin hears MIDI notes from 36-107. All others are thrown out. 
Messages on channel 1 play Sound1, channel 2 plays Sound2, 3 plays Sound3,
and 4 plays Sound4. All other channel messages are thrown out. The velocity
component of the Note on message (the second data byte) is treated as an
initial envelope volume.

The MIDI note corresponds to the closest frequency value on the sound 
hardware. At higher pitches, this might be slightly inaccurate. Also, 
Sound4 does not have any frequency pointers and the note value will be
ignored (as long as it is between 36 and 107.)

{Future: channel offset}

MIDI Note Off Messages
----------------------
Since Pushpin is monophonic per channel, the content of a note off message
doesn't matter. It just needs to be sent on the appopriate channel and 
Pushpin will shut off the sound. If playing legato lead lines, you might
wish to omit note off messages entirely for smoother sweeps, as the note 
off command in the sound hardware has been known to create 'clicks' given
certain conditions.

MIDI Pitch Bend Messages
------------------------
An incoming Pitch Bend message will shift that channel's frequency 
accordingly (except for the noise channel) to within +/- 12 steps.

MIDI Program Change Messages
----------------------------
Pushpin stores 'channel patches' in its battery-backed RAM. This allows
users to save and recall sound configurations on each of the 4 sound
channels. A Program Change message on channel 1 will choose the specified
patch (0-127) from Sound1's data storage. The current patch number is
displayed on the device, and the START button will save any future
permuations to that patch back in memory. All correpsonding parameters of
each channel are saved, and Sound3's Wave Pattern RAM is saved along with
its data.

MIDI Controllers
----------------
While you can use all of these, some of them will have little or no effect
due to the nature of the software. Pushpin, using our Standard MIDI Manager
(SMM) automatically controls the frequencies of each of the 4 channels as 
well as their length and volume. That makes the low and high frequency 
controls, the initial envelope controls and the sound on/off controls not 
worth using. But don't let that stop you! We allow the user to change each
parameter of the sound hardware so that the more enterprising types can
create their own special patches. 

If you plan to use some of the other parameters of Pushpin, please take
the time to read a sound hardware document. There are some inconsistencies
and bugs in the sound hardware that neither you nor Pushpin have any 
control over.


*** IMPORTANT NOTE *** 
The Range value below is just to show what the dynamics of the hardware
can handle. You should *always* send full-bit MIDI CC ranges (0-127) --
the SMM automatically puts your value in range to the hardware. For
example, to set the Sound1 wave duty at 75%, we could send a CC#3 of
anything over 96. To set it at 12.5%, we send a CC#3 at anything under
32. Accordingly, the 0-1 values (such as sound on-off) are turned 'on' by
any controller value over 64.

*** NOTE (about Panning) ***
Since panning on the sound hardware isn't "logical" (you have to set two
controller values to change each channel's pan position), we have
upgraded the SMM with 4 extra controllers, 86-89. Each controller
controls a channel's panorama position, where controller values between 0
and 31 push the channel towards the left, 96-127 push it towards the
right, and anything else keeps it in the center. Of course, you still can
use the panning controls of the sound hardware, but it is less intuitive.


First, here are the most useful CC parameters in SMM mode:

0	Sound1 sweep time. Range: 0-15. (off - 55 ms)
1	Sound1 sweep increase (0) or decrease (1). Range: 0-1
2	Sound1 # of sweep shifts. Range: 0-7
3	Sound1 Wave Pattern Duty. Range: 0-3 (12.5%-75%)
5	Sound1 initial envelope volume. Set by MIDI velocity in SMM. Range: 0-15 (15 is max volume)
6	Sound1 envelope up (1) or down (0). Range 0-1
7	Sound1 length of envelope steps. Range 0-7, length = x*(1/64) seconds.
12	Sound2 Wave Pattern Duty. Range: 0-3 (12.5%-75%)
14	Sound2 initial envelope volume. Set by MIDI velocity in SMM. Range: 0-15 (15 is max volume)
15	Sound2 envelope up (1) or down (0). Range 0-1
16	Sound2 length of envelope steps. Range 0-7, length = x*(1/64) seconds.
23	Sound3 output level. Range 0-3. 0=mute, 1=full, 2=1/2, 3=1/4.
29	Sound4 initial envelope volume. Set by MIDI velocity in SMM. Range 0-15 (15 is max volume)
30	Sound4 envelope up (1) or down (0). Range 0-1
31	Sound4 length of envelope steps. Range 0-7, length = x*(1/64) seconds.
32	Sound4 shift clock frequency. Range 0-15, freq = ratio * (.5)^(x+1) (x={14,15} undefined)
33	Sound4 counter step count. Range 0-1, {x=0} is 15 steps, {x=1} is 7.
34	Sound4 frequency ratio. Range 0-7, ratio = f * (.5)^3 * (1/x) {x(0)=.5}
54-85   Wave Pattern RAM (can be changed during playback)
86	Sound1 Pan (0-31 left, 32-95 center, 96-127 right)
87	Sound2 Pan (0-31 left, 32-95 center, 96-127 right)
88	Sound3 Pan (0-31 left, 32-95 center, 96-127 right)
89	Sound4 Pan (0-31 left, 32-95 center, 96-127 right)


And here is the complete list:


CC#	Name
-----|----------------------------------------------------------------------------------------------

Sound1: Square wave with frequency sweep and envelope.
0	Sound1 sweep time. Range: 0-15. (off - 55 ms)
1	Sound1 sweep increase (0) or decrease (1). Range: 0-1
2	Sound1 # of sweep shifts. Range: 0-7
3	Sound1 Wave Pattern Duty. Range: 0-3 (12.5%-75%)
4	Sound1 sound length. Ignored in SMM. Range: 0-63, time=(x-64)*(1/256) seconds
5	Sound1 initial envelope volume. Set by MIDI velocity in SMM. Range: 0-15 (15 is max volume)
6	Sound1 envelope up (1) or down (0). Range 0-1
7	Sound1 length of envelope steps. Range 0-7, length = x*(1/64) seconds.
8	Sound1 low frequency data. Range 0-255. Set by MIDI note on in SMM and pitch bend.
9	Sound1 sound start (1) or stop (0). Ignored in SMM. Range 0-1
10	Sound1 Counter mode (uses sound length) (1) or consecutive (0). Ignored in SMM. Range 0-1
11	Sound1 high frequency data. Range 0-7. Set by MIDI note on in SMM and pitch bend.

Sound2: Square wave with envelope.
12	Sound2 Wave Pattern Duty. Range: 0-3 (12.5%-75%)
13	Sound2 sound length. Ignored in SMM. Range: 0-63, time=(x-64)*(1/256) seconds
14	Sound2 initial envelope volume. Set by MIDI velocity in SMM. Range: 0-15 (15 is max volume)
15	Sound2 envelope up (1) or down (0). Range 0-1
16	Sound2 length of envelope steps. Range 0-7, length = x*(1/64) seconds.
17	Sound2 low frequency data. Range 0-255. Set by MIDI note on in SMM and pitch bend.
18	Sound2 sound start (1) or stop (0). Ignored in SMM. Range 0-1
19	Sound2 Counter mode (uses sound length) (1) or consecutive (0). Ignored in SMM. Range 0-1
20	Sound2 high frequency data. Range 0-7. Set by MIDI note on in SMM and pitch bend.

Sound3: Wave pattern player. (Set the wave with CCs 54-85)
21	Sound3 sound on (1) or off (0). Ignored in SMM. Range 0-1
22	Sound3 sound length. Ignored in SMM. Range 0-255, time=(x-256)*(1/256) seconds.
23	Sound3 output level. Range 0-3. 0=mute, 1=full, 2=1/2, 3=1/4.
24	Sound3 low frequency data. Range 0-255. Set by MIDI note on in SMM and pitch bend.
25	Sound3 sound start (1) or stop (0). Ignored in SMM. Range 0-1
26	Sound3 Counter mode (uses sound length) (1) or consecutive (0). Ignored in SMM. Range 0-1
27	Sound3 high frequency data. Range 0-7. Set by MIDI note on in SMM and pitch bend.

Sound4: noise channel.
28	Sound4 sound length. Ignored in SMM. Range 0-63, time=(x-64)*(1/256) seconds
29	Sound4 initial envelope volume. Set by MIDI velocity in SMM. Range 0-15 (15 is max volume)
30	Sound4 envelope up (1) or down (0). Range 0-1
31	Sound4 length of envelope steps. Range 0-7, length = x*(1/64) seconds.
32	Sound4 shift clock frequency. Range 0-15, freq = ratio * (.5)^(x+1) (x={14,15} undefined)
33	Sound4 counter step count. Range 0-1, {x=0} is 15 steps, {x=1} is 7.
34	Sound4 frequency ratio. Range 0-7, ratio = f * (.5)^3 * (1/x) {x(0)=.5}
35	Sound4 sound start (1) or stop (0). Ignored in SMM. Range 0-1
36	Sound4 Counter mode (uses sound length) (1) or consecutive (0). Ignored in SMM. Range 0-1

Control parameters.
37	Cartridge Sound In -> Left Channel on (1) or off (0). Will have no effect.
38	Left channel output level. Range 0-7 (7 is max).
39	Cartridge Sound In -> Right Channel on (1) or off (0). Will have no effect.
40	Right channel output level. Range 0-7 (7 is max).
41	Sound4 to Left channel on (1) or off (0). 
42	Sound3 to Left Channel on (1) or off (0).
43	Sound2 to Left channel on (1) or off (0). 
44	Sound1 to Left Channel on (1) or off (0).
45	Sound4 to Right channel on (1) or off (0). 
46	Sound3 to Right Channel on (1) or off (0).
47	Sound2 to Right channel on (1) or off (0). 
48	Sound1 to Right Channel on (1) or off (0).
49	All sound on (1) or off (0).
50	Sound4 global on (1) or off (0).
51	Sound3 global on (1) or off (0).
52	Sound2 global on (1) or off (0).
53	Sound1 global on (1) or off (0).

Wave Pattern RAM:
54	Sample #0. Range 0-15, a 4-bit sample. 
55	Sample #1. Range 0-15, a 4-bit sample.
56	Sample #2. Range 0-15, a 4-bit sample.
..
85	Sample #31. Range 0-15, a 4-bit sample.

SMM Extras:
86	Sound1 Pan (0-31 left, 32-95 center, 96-127 right)
87	Sound2 Pan (0-31 left, 32-95 center, 96-127 right)
88	Sound3 Pan (0-31 left, 32-95 center, 96-127 right)
89	Sound4 Pan (0-31 left, 32-95 center, 96-127 right)

